Current input file: /Users/Brynden/src/glang/test/program1.glang
[Unknown]	$
[Identifier]	Variables
[Identifier]	are
[Identifier]	declared
[Identifier]	using
[Identifier]	the
[Unknown]	'
[Identifier]	let
[Unknown]	'
[Identifier]	keyword
[Unknown]	.
[Identifier]	let
[Identifier]	myVariable
[Unknown]	=
[Number]	2
[Terminator]	;
[Unknown]	$
[Identifier]	Functions
[Identifier]	can
[Identifier]	be
[Identifier]	declared
[Identifier]	using
[Identifier]	the
[Identifier]	following
[Identifier]	syntax
[Identifier]	fn
[Identifier]	myFunc
[LeftParen]	[
[RightParen]	]
[Identifier]	do
[Terminator]	;
[Unknown]	$
[Identifier]	Rather
[Identifier]	than
[Identifier]	having
[Identifier]	a
[Identifier]	generic
[Unknown]	"
[Identifier]	return
[Unknown]	",
[Identifier]	we
[Unknown]	'
[Identifier]	ll
[Identifier]	use
[Unknown]	'
[Identifier]	give
[Unknown]	'
[Identifier]	give
[Number]	3
[Terminator]	;
[Identifier]	done
[Terminator]	;
[Unknown]	$
[Identifier]	Functions
[Identifier]	can
[Identifier]	be
[Identifier]	invoked
[Identifier]	as
[Identifier]	follows
[Unknown]	:
[Identifier]	myFunc
[LeftParen]	[
[RightParen]	]
[Terminator]	;
[Unknown]	$
[LeftParen]	[
[RightParen]	]
[Identifier]	and
[LeftParen]	(
[RightParen]	)
[Identifier]	are
[Identifier]	considered
[Identifier]	the
[Identifier]	same
[Identifier]	thing
[Unknown]	,
[Identifier]	so
[Identifier]	we
[Identifier]	could
[Identifier]	also
[Identifier]	do
[Identifier]	this
[Unknown]	:
[Identifier]	myFunc
[LeftParen]	(
[RightParen]	)
[Terminator]	;
